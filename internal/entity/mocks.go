// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package entity

import (
	"context"
	mock "github.com/stretchr/testify/mock"
	"time"
)

// NewMockArtistRepository creates a new instance of MockArtistRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArtistRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArtistRepository {
	mock := &MockArtistRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockArtistRepository is an autogenerated mock type for the ArtistRepository type
type MockArtistRepository struct {
	mock.Mock
}

type MockArtistRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockArtistRepository) EXPECT() *MockArtistRepository_Expecter {
	return &MockArtistRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockArtistRepository
func (_mock *MockArtistRepository) Create(ctx context.Context, params *NewArtist) (*Artist, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *Artist
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *NewArtist) (*Artist, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *NewArtist) *Artist); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Artist)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *NewArtist) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockArtistRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockArtistRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - params *NewArtist
func (_e *MockArtistRepository_Expecter) Create(ctx interface{}, params interface{}) *MockArtistRepository_Create_Call {
	return &MockArtistRepository_Create_Call{Call: _e.mock.On("Create", ctx, params)}
}

func (_c *MockArtistRepository_Create_Call) Run(run func(ctx context.Context, params *NewArtist)) *MockArtistRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *NewArtist
		if args[1] != nil {
			arg1 = args[1].(*NewArtist)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockArtistRepository_Create_Call) Return(artist *Artist, err error) *MockArtistRepository_Create_Call {
	_c.Call.Return(artist, err)
	return _c
}

func (_c *MockArtistRepository_Create_Call) RunAndReturn(run func(ctx context.Context, params *NewArtist) (*Artist, error)) *MockArtistRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockArtistRepository
func (_mock *MockArtistRepository) Delete(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockArtistRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockArtistRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockArtistRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockArtistRepository_Delete_Call {
	return &MockArtistRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockArtistRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *MockArtistRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockArtistRepository_Delete_Call) Return(err error) *MockArtistRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockArtistRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockArtistRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockArtistRepository
func (_mock *MockArtistRepository) Get(ctx context.Context, id string) (*Artist, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *Artist
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*Artist, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *Artist); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Artist)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockArtistRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockArtistRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockArtistRepository_Expecter) Get(ctx interface{}, id interface{}) *MockArtistRepository_Get_Call {
	return &MockArtistRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockArtistRepository_Get_Call) Run(run func(ctx context.Context, id string)) *MockArtistRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockArtistRepository_Get_Call) Return(artist *Artist, err error) *MockArtistRepository_Get_Call {
	_c.Call.Return(artist, err)
	return _c
}

func (_c *MockArtistRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id string) (*Artist, error)) *MockArtistRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetBySpotifyID provides a mock function for the type MockArtistRepository
func (_mock *MockArtistRepository) GetBySpotifyID(ctx context.Context, spotifyID string) (*Artist, error) {
	ret := _mock.Called(ctx, spotifyID)

	if len(ret) == 0 {
		panic("no return value specified for GetBySpotifyID")
	}

	var r0 *Artist
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*Artist, error)); ok {
		return returnFunc(ctx, spotifyID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *Artist); ok {
		r0 = returnFunc(ctx, spotifyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Artist)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, spotifyID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockArtistRepository_GetBySpotifyID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySpotifyID'
type MockArtistRepository_GetBySpotifyID_Call struct {
	*mock.Call
}

// GetBySpotifyID is a helper method to define mock.On call
//   - ctx context.Context
//   - spotifyID string
func (_e *MockArtistRepository_Expecter) GetBySpotifyID(ctx interface{}, spotifyID interface{}) *MockArtistRepository_GetBySpotifyID_Call {
	return &MockArtistRepository_GetBySpotifyID_Call{Call: _e.mock.On("GetBySpotifyID", ctx, spotifyID)}
}

func (_c *MockArtistRepository_GetBySpotifyID_Call) Run(run func(ctx context.Context, spotifyID string)) *MockArtistRepository_GetBySpotifyID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockArtistRepository_GetBySpotifyID_Call) Return(artist *Artist, err error) *MockArtistRepository_GetBySpotifyID_Call {
	_c.Call.Return(artist, err)
	return _c
}

func (_c *MockArtistRepository_GetBySpotifyID_Call) RunAndReturn(run func(ctx context.Context, spotifyID string) (*Artist, error)) *MockArtistRepository_GetBySpotifyID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockArtistRepository
func (_mock *MockArtistRepository) List(ctx context.Context, limit int, offset int) ([]*Artist, error) {
	ret := _mock.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*Artist
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*Artist, error)); ok {
		return returnFunc(ctx, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*Artist); ok {
		r0 = returnFunc(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Artist)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockArtistRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockArtistRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - offset int
func (_e *MockArtistRepository_Expecter) List(ctx interface{}, limit interface{}, offset interface{}) *MockArtistRepository_List_Call {
	return &MockArtistRepository_List_Call{Call: _e.mock.On("List", ctx, limit, offset)}
}

func (_c *MockArtistRepository_List_Call) Run(run func(ctx context.Context, limit int, offset int)) *MockArtistRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockArtistRepository_List_Call) Return(artists []*Artist, err error) *MockArtistRepository_List_Call {
	_c.Call.Return(artists, err)
	return _c
}

func (_c *MockArtistRepository_List_Call) RunAndReturn(run func(ctx context.Context, limit int, offset int) ([]*Artist, error)) *MockArtistRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockArtistRepository
func (_mock *MockArtistRepository) Update(ctx context.Context, id string, params *NewArtist) (*Artist, error) {
	ret := _mock.Called(ctx, id, params)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *Artist
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *NewArtist) (*Artist, error)); ok {
		return returnFunc(ctx, id, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *NewArtist) *Artist); ok {
		r0 = returnFunc(ctx, id, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Artist)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *NewArtist) error); ok {
		r1 = returnFunc(ctx, id, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockArtistRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockArtistRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - params *NewArtist
func (_e *MockArtistRepository_Expecter) Update(ctx interface{}, id interface{}, params interface{}) *MockArtistRepository_Update_Call {
	return &MockArtistRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, params)}
}

func (_c *MockArtistRepository_Update_Call) Run(run func(ctx context.Context, id string, params *NewArtist)) *MockArtistRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *NewArtist
		if args[2] != nil {
			arg2 = args[2].(*NewArtist)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockArtistRepository_Update_Call) Return(artist *Artist, err error) *MockArtistRepository_Update_Call {
	_c.Call.Return(artist, err)
	return _c
}

func (_c *MockArtistRepository_Update_Call) RunAndReturn(run func(ctx context.Context, id string, params *NewArtist) (*Artist, error)) *MockArtistRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConcertRepository creates a new instance of MockConcertRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConcertRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConcertRepository {
	mock := &MockConcertRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConcertRepository is an autogenerated mock type for the ConcertRepository type
type MockConcertRepository struct {
	mock.Mock
}

type MockConcertRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConcertRepository) EXPECT() *MockConcertRepository_Expecter {
	return &MockConcertRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockConcertRepository
func (_mock *MockConcertRepository) Create(ctx context.Context, params *NewConcert) (*Concert, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *Concert
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *NewConcert) (*Concert, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *NewConcert) *Concert); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Concert)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *NewConcert) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConcertRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockConcertRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - params *NewConcert
func (_e *MockConcertRepository_Expecter) Create(ctx interface{}, params interface{}) *MockConcertRepository_Create_Call {
	return &MockConcertRepository_Create_Call{Call: _e.mock.On("Create", ctx, params)}
}

func (_c *MockConcertRepository_Create_Call) Run(run func(ctx context.Context, params *NewConcert)) *MockConcertRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *NewConcert
		if args[1] != nil {
			arg1 = args[1].(*NewConcert)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConcertRepository_Create_Call) Return(concert *Concert, err error) *MockConcertRepository_Create_Call {
	_c.Call.Return(concert, err)
	return _c
}

func (_c *MockConcertRepository_Create_Call) RunAndReturn(run func(ctx context.Context, params *NewConcert) (*Concert, error)) *MockConcertRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockConcertRepository
func (_mock *MockConcertRepository) Delete(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConcertRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockConcertRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockConcertRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockConcertRepository_Delete_Call {
	return &MockConcertRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockConcertRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *MockConcertRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConcertRepository_Delete_Call) Return(err error) *MockConcertRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConcertRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockConcertRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockConcertRepository
func (_mock *MockConcertRepository) Get(ctx context.Context, id string) (*Concert, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *Concert
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*Concert, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *Concert); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Concert)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConcertRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockConcertRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockConcertRepository_Expecter) Get(ctx interface{}, id interface{}) *MockConcertRepository_Get_Call {
	return &MockConcertRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockConcertRepository_Get_Call) Run(run func(ctx context.Context, id string)) *MockConcertRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConcertRepository_Get_Call) Return(concert *Concert, err error) *MockConcertRepository_Get_Call {
	_c.Call.Return(concert, err)
	return _c
}

func (_c *MockConcertRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id string) (*Concert, error)) *MockConcertRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByArtist provides a mock function for the type MockConcertRepository
func (_mock *MockConcertRepository) GetByArtist(ctx context.Context, artistID string, limit int, offset int) ([]*Concert, error) {
	ret := _mock.Called(ctx, artistID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetByArtist")
	}

	var r0 []*Concert
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*Concert, error)); ok {
		return returnFunc(ctx, artistID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) []*Concert); ok {
		r0 = returnFunc(ctx, artistID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Concert)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = returnFunc(ctx, artistID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConcertRepository_GetByArtist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByArtist'
type MockConcertRepository_GetByArtist_Call struct {
	*mock.Call
}

// GetByArtist is a helper method to define mock.On call
//   - ctx context.Context
//   - artistID string
//   - limit int
//   - offset int
func (_e *MockConcertRepository_Expecter) GetByArtist(ctx interface{}, artistID interface{}, limit interface{}, offset interface{}) *MockConcertRepository_GetByArtist_Call {
	return &MockConcertRepository_GetByArtist_Call{Call: _e.mock.On("GetByArtist", ctx, artistID, limit, offset)}
}

func (_c *MockConcertRepository_GetByArtist_Call) Run(run func(ctx context.Context, artistID string, limit int, offset int)) *MockConcertRepository_GetByArtist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockConcertRepository_GetByArtist_Call) Return(concerts []*Concert, err error) *MockConcertRepository_GetByArtist_Call {
	_c.Call.Return(concerts, err)
	return _c
}

func (_c *MockConcertRepository_GetByArtist_Call) RunAndReturn(run func(ctx context.Context, artistID string, limit int, offset int) ([]*Concert, error)) *MockConcertRepository_GetByArtist_Call {
	_c.Call.Return(run)
	return _c
}

// GetByLocation provides a mock function for the type MockConcertRepository
func (_mock *MockConcertRepository) GetByLocation(ctx context.Context, city string, country string, limit int, offset int) ([]*Concert, error) {
	ret := _mock.Called(ctx, city, country, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetByLocation")
	}

	var r0 []*Concert
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, int) ([]*Concert, error)); ok {
		return returnFunc(ctx, city, country, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, int) []*Concert); ok {
		r0 = returnFunc(ctx, city, country, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Concert)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int, int) error); ok {
		r1 = returnFunc(ctx, city, country, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConcertRepository_GetByLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByLocation'
type MockConcertRepository_GetByLocation_Call struct {
	*mock.Call
}

// GetByLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - city string
//   - country string
//   - limit int
//   - offset int
func (_e *MockConcertRepository_Expecter) GetByLocation(ctx interface{}, city interface{}, country interface{}, limit interface{}, offset interface{}) *MockConcertRepository_GetByLocation_Call {
	return &MockConcertRepository_GetByLocation_Call{Call: _e.mock.On("GetByLocation", ctx, city, country, limit, offset)}
}

func (_c *MockConcertRepository_GetByLocation_Call) Run(run func(ctx context.Context, city string, country string, limit int, offset int)) *MockConcertRepository_GetByLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 int
		if args[4] != nil {
			arg4 = args[4].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockConcertRepository_GetByLocation_Call) Return(concerts []*Concert, err error) *MockConcertRepository_GetByLocation_Call {
	_c.Call.Return(concerts, err)
	return _c
}

func (_c *MockConcertRepository_GetByLocation_Call) RunAndReturn(run func(ctx context.Context, city string, country string, limit int, offset int) ([]*Concert, error)) *MockConcertRepository_GetByLocation_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpcoming provides a mock function for the type MockConcertRepository
func (_mock *MockConcertRepository) GetUpcoming(ctx context.Context, limit int, offset int) ([]*Concert, error) {
	ret := _mock.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetUpcoming")
	}

	var r0 []*Concert
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*Concert, error)); ok {
		return returnFunc(ctx, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*Concert); ok {
		r0 = returnFunc(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Concert)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConcertRepository_GetUpcoming_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpcoming'
type MockConcertRepository_GetUpcoming_Call struct {
	*mock.Call
}

// GetUpcoming is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - offset int
func (_e *MockConcertRepository_Expecter) GetUpcoming(ctx interface{}, limit interface{}, offset interface{}) *MockConcertRepository_GetUpcoming_Call {
	return &MockConcertRepository_GetUpcoming_Call{Call: _e.mock.On("GetUpcoming", ctx, limit, offset)}
}

func (_c *MockConcertRepository_GetUpcoming_Call) Run(run func(ctx context.Context, limit int, offset int)) *MockConcertRepository_GetUpcoming_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockConcertRepository_GetUpcoming_Call) Return(concerts []*Concert, err error) *MockConcertRepository_GetUpcoming_Call {
	_c.Call.Return(concerts, err)
	return _c
}

func (_c *MockConcertRepository_GetUpcoming_Call) RunAndReturn(run func(ctx context.Context, limit int, offset int) ([]*Concert, error)) *MockConcertRepository_GetUpcoming_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockConcertRepository
func (_mock *MockConcertRepository) List(ctx context.Context, limit int, offset int) ([]*Concert, error) {
	ret := _mock.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*Concert
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*Concert, error)); ok {
		return returnFunc(ctx, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*Concert); ok {
		r0 = returnFunc(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Concert)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConcertRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockConcertRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - offset int
func (_e *MockConcertRepository_Expecter) List(ctx interface{}, limit interface{}, offset interface{}) *MockConcertRepository_List_Call {
	return &MockConcertRepository_List_Call{Call: _e.mock.On("List", ctx, limit, offset)}
}

func (_c *MockConcertRepository_List_Call) Run(run func(ctx context.Context, limit int, offset int)) *MockConcertRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockConcertRepository_List_Call) Return(concerts []*Concert, err error) *MockConcertRepository_List_Call {
	_c.Call.Return(concerts, err)
	return _c
}

func (_c *MockConcertRepository_List_Call) RunAndReturn(run func(ctx context.Context, limit int, offset int) ([]*Concert, error)) *MockConcertRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockConcertRepository
func (_mock *MockConcertRepository) Update(ctx context.Context, id string, params *NewConcert) (*Concert, error) {
	ret := _mock.Called(ctx, id, params)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *Concert
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *NewConcert) (*Concert, error)); ok {
		return returnFunc(ctx, id, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *NewConcert) *Concert); ok {
		r0 = returnFunc(ctx, id, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Concert)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *NewConcert) error); ok {
		r1 = returnFunc(ctx, id, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConcertRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockConcertRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - params *NewConcert
func (_e *MockConcertRepository_Expecter) Update(ctx interface{}, id interface{}, params interface{}) *MockConcertRepository_Update_Call {
	return &MockConcertRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, params)}
}

func (_c *MockConcertRepository_Update_Call) Run(run func(ctx context.Context, id string, params *NewConcert)) *MockConcertRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *NewConcert
		if args[2] != nil {
			arg2 = args[2].(*NewConcert)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockConcertRepository_Update_Call) Return(concert *Concert, err error) *MockConcertRepository_Update_Call {
	_c.Call.Return(concert, err)
	return _c
}

func (_c *MockConcertRepository_Update_Call) RunAndReturn(run func(ctx context.Context, id string, params *NewConcert) (*Concert, error)) *MockConcertRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotificationRepository creates a new instance of MockNotificationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationRepository {
	mock := &MockNotificationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNotificationRepository is an autogenerated mock type for the NotificationRepository type
type MockNotificationRepository struct {
	mock.Mock
}

type MockNotificationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationRepository) EXPECT() *MockNotificationRepository_Expecter {
	return &MockNotificationRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockNotificationRepository
func (_mock *MockNotificationRepository) Create(ctx context.Context, params *NewNotification) (*Notification, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *Notification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *NewNotification) (*Notification, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *NewNotification) *Notification); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Notification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *NewNotification) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotificationRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockNotificationRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - params *NewNotification
func (_e *MockNotificationRepository_Expecter) Create(ctx interface{}, params interface{}) *MockNotificationRepository_Create_Call {
	return &MockNotificationRepository_Create_Call{Call: _e.mock.On("Create", ctx, params)}
}

func (_c *MockNotificationRepository_Create_Call) Run(run func(ctx context.Context, params *NewNotification)) *MockNotificationRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *NewNotification
		if args[1] != nil {
			arg1 = args[1].(*NewNotification)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockNotificationRepository_Create_Call) Return(notification *Notification, err error) *MockNotificationRepository_Create_Call {
	_c.Call.Return(notification, err)
	return _c
}

func (_c *MockNotificationRepository_Create_Call) RunAndReturn(run func(ctx context.Context, params *NewNotification) (*Notification, error)) *MockNotificationRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockNotificationRepository
func (_mock *MockNotificationRepository) Delete(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNotificationRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockNotificationRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockNotificationRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockNotificationRepository_Delete_Call {
	return &MockNotificationRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockNotificationRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *MockNotificationRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockNotificationRepository_Delete_Call) Return(err error) *MockNotificationRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotificationRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockNotificationRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockNotificationRepository
func (_mock *MockNotificationRepository) Get(ctx context.Context, id string) (*Notification, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *Notification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*Notification, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *Notification); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Notification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotificationRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockNotificationRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockNotificationRepository_Expecter) Get(ctx interface{}, id interface{}) *MockNotificationRepository_Get_Call {
	return &MockNotificationRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockNotificationRepository_Get_Call) Run(run func(ctx context.Context, id string)) *MockNotificationRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockNotificationRepository_Get_Call) Return(notification *Notification, err error) *MockNotificationRepository_Get_Call {
	_c.Call.Return(notification, err)
	return _c
}

func (_c *MockNotificationRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id string) (*Notification, error)) *MockNotificationRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUser provides a mock function for the type MockNotificationRepository
func (_mock *MockNotificationRepository) GetByUser(ctx context.Context, userID string, limit int, offset int) ([]*Notification, error) {
	ret := _mock.Called(ctx, userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetByUser")
	}

	var r0 []*Notification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*Notification, error)); ok {
		return returnFunc(ctx, userID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) []*Notification); ok {
		r0 = returnFunc(ctx, userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Notification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = returnFunc(ctx, userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotificationRepository_GetByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUser'
type MockNotificationRepository_GetByUser_Call struct {
	*mock.Call
}

// GetByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - limit int
//   - offset int
func (_e *MockNotificationRepository_Expecter) GetByUser(ctx interface{}, userID interface{}, limit interface{}, offset interface{}) *MockNotificationRepository_GetByUser_Call {
	return &MockNotificationRepository_GetByUser_Call{Call: _e.mock.On("GetByUser", ctx, userID, limit, offset)}
}

func (_c *MockNotificationRepository_GetByUser_Call) Run(run func(ctx context.Context, userID string, limit int, offset int)) *MockNotificationRepository_GetByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockNotificationRepository_GetByUser_Call) Return(notifications []*Notification, err error) *MockNotificationRepository_GetByUser_Call {
	_c.Call.Return(notifications, err)
	return _c
}

func (_c *MockNotificationRepository_GetByUser_Call) RunAndReturn(run func(ctx context.Context, userID string, limit int, offset int) ([]*Notification, error)) *MockNotificationRepository_GetByUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetPending provides a mock function for the type MockNotificationRepository
func (_mock *MockNotificationRepository) GetPending(ctx context.Context, limit int, offset int) ([]*Notification, error) {
	ret := _mock.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetPending")
	}

	var r0 []*Notification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*Notification, error)); ok {
		return returnFunc(ctx, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*Notification); ok {
		r0 = returnFunc(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Notification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotificationRepository_GetPending_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPending'
type MockNotificationRepository_GetPending_Call struct {
	*mock.Call
}

// GetPending is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - offset int
func (_e *MockNotificationRepository_Expecter) GetPending(ctx interface{}, limit interface{}, offset interface{}) *MockNotificationRepository_GetPending_Call {
	return &MockNotificationRepository_GetPending_Call{Call: _e.mock.On("GetPending", ctx, limit, offset)}
}

func (_c *MockNotificationRepository_GetPending_Call) Run(run func(ctx context.Context, limit int, offset int)) *MockNotificationRepository_GetPending_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNotificationRepository_GetPending_Call) Return(notifications []*Notification, err error) *MockNotificationRepository_GetPending_Call {
	_c.Call.Return(notifications, err)
	return _c
}

func (_c *MockNotificationRepository_GetPending_Call) RunAndReturn(run func(ctx context.Context, limit int, offset int) ([]*Notification, error)) *MockNotificationRepository_GetPending_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockNotificationRepository
func (_mock *MockNotificationRepository) List(ctx context.Context, limit int, offset int) ([]*Notification, error) {
	ret := _mock.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*Notification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*Notification, error)); ok {
		return returnFunc(ctx, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*Notification); ok {
		r0 = returnFunc(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Notification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotificationRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockNotificationRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - offset int
func (_e *MockNotificationRepository_Expecter) List(ctx interface{}, limit interface{}, offset interface{}) *MockNotificationRepository_List_Call {
	return &MockNotificationRepository_List_Call{Call: _e.mock.On("List", ctx, limit, offset)}
}

func (_c *MockNotificationRepository_List_Call) Run(run func(ctx context.Context, limit int, offset int)) *MockNotificationRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNotificationRepository_List_Call) Return(notifications []*Notification, err error) *MockNotificationRepository_List_Call {
	_c.Call.Return(notifications, err)
	return _c
}

func (_c *MockNotificationRepository_List_Call) RunAndReturn(run func(ctx context.Context, limit int, offset int) ([]*Notification, error)) *MockNotificationRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAsSent provides a mock function for the type MockNotificationRepository
func (_mock *MockNotificationRepository) MarkAsSent(ctx context.Context, id string, sentAt time.Time) error {
	ret := _mock.Called(ctx, id, sentAt)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsSent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = returnFunc(ctx, id, sentAt)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNotificationRepository_MarkAsSent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsSent'
type MockNotificationRepository_MarkAsSent_Call struct {
	*mock.Call
}

// MarkAsSent is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - sentAt time.Time
func (_e *MockNotificationRepository_Expecter) MarkAsSent(ctx interface{}, id interface{}, sentAt interface{}) *MockNotificationRepository_MarkAsSent_Call {
	return &MockNotificationRepository_MarkAsSent_Call{Call: _e.mock.On("MarkAsSent", ctx, id, sentAt)}
}

func (_c *MockNotificationRepository_MarkAsSent_Call) Run(run func(ctx context.Context, id string, sentAt time.Time)) *MockNotificationRepository_MarkAsSent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNotificationRepository_MarkAsSent_Call) Return(err error) *MockNotificationRepository_MarkAsSent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotificationRepository_MarkAsSent_Call) RunAndReturn(run func(ctx context.Context, id string, sentAt time.Time) error) *MockNotificationRepository_MarkAsSent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function for the type MockNotificationRepository
func (_mock *MockNotificationRepository) UpdateStatus(ctx context.Context, id string, status NotificationStatus) error {
	ret := _mock.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, NotificationStatus) error); ok {
		r0 = returnFunc(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNotificationRepository_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockNotificationRepository_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - status NotificationStatus
func (_e *MockNotificationRepository_Expecter) UpdateStatus(ctx interface{}, id interface{}, status interface{}) *MockNotificationRepository_UpdateStatus_Call {
	return &MockNotificationRepository_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, id, status)}
}

func (_c *MockNotificationRepository_UpdateStatus_Call) Run(run func(ctx context.Context, id string, status NotificationStatus)) *MockNotificationRepository_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 NotificationStatus
		if args[2] != nil {
			arg2 = args[2].(NotificationStatus)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNotificationRepository_UpdateStatus_Call) Return(err error) *MockNotificationRepository_UpdateStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotificationRepository_UpdateStatus_Call) RunAndReturn(run func(ctx context.Context, id string, status NotificationStatus) error) *MockNotificationRepository_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Create(ctx context.Context, params *NewUser) (*User, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *NewUser) (*User, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *NewUser) *User); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *NewUser) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - params *NewUser
func (_e *MockUserRepository_Expecter) Create(ctx interface{}, params interface{}) *MockUserRepository_Create_Call {
	return &MockUserRepository_Create_Call{Call: _e.mock.On("Create", ctx, params)}
}

func (_c *MockUserRepository_Create_Call) Run(run func(ctx context.Context, params *NewUser)) *MockUserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *NewUser
		if args[1] != nil {
			arg1 = args[1].(*NewUser)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_Create_Call) Return(user *User, err error) *MockUserRepository_Create_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_Create_Call) RunAndReturn(run func(ctx context.Context, params *NewUser) (*User, error)) *MockUserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Delete(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUserRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockUserRepository_Delete_Call {
	return &MockUserRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockUserRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *MockUserRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_Delete_Call) Return(err error) *MockUserRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockUserRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Get(ctx context.Context, id string) (*User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUserRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserRepository_Expecter) Get(ctx interface{}, id interface{}) *MockUserRepository_Get_Call {
	return &MockUserRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockUserRepository_Get_Call) Run(run func(ctx context.Context, id string)) *MockUserRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_Get_Call) Return(user *User, err error) *MockUserRepository_Get_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id string) (*User, error)) *MockUserRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetByEmail(ctx context.Context, email string) (*User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockUserRepository_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserRepository_Expecter) GetByEmail(ctx interface{}, email interface{}) *MockUserRepository_GetByEmail_Call {
	return &MockUserRepository_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *MockUserRepository_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserRepository_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_GetByEmail_Call) Return(user *User, err error) *MockUserRepository_GetByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*User, error)) *MockUserRepository_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) List(ctx context.Context, limit int, offset int) ([]*User, error) {
	ret := _mock.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*User, error)); ok {
		return returnFunc(ctx, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*User); ok {
		r0 = returnFunc(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockUserRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - offset int
func (_e *MockUserRepository_Expecter) List(ctx interface{}, limit interface{}, offset interface{}) *MockUserRepository_List_Call {
	return &MockUserRepository_List_Call{Call: _e.mock.On("List", ctx, limit, offset)}
}

func (_c *MockUserRepository_List_Call) Run(run func(ctx context.Context, limit int, offset int)) *MockUserRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserRepository_List_Call) Return(users []*User, err error) *MockUserRepository_List_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockUserRepository_List_Call) RunAndReturn(run func(ctx context.Context, limit int, offset int) ([]*User, error)) *MockUserRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Update(ctx context.Context, id string, params *NewUser) (*User, error) {
	ret := _mock.Called(ctx, id, params)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *NewUser) (*User, error)); ok {
		return returnFunc(ctx, id, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *NewUser) *User); ok {
		r0 = returnFunc(ctx, id, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *NewUser) error); ok {
		r1 = returnFunc(ctx, id, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - params *NewUser
func (_e *MockUserRepository_Expecter) Update(ctx interface{}, id interface{}, params interface{}) *MockUserRepository_Update_Call {
	return &MockUserRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, params)}
}

func (_c *MockUserRepository_Update_Call) Run(run func(ctx context.Context, id string, params *NewUser)) *MockUserRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *NewUser
		if args[2] != nil {
			arg2 = args[2].(*NewUser)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserRepository_Update_Call) Return(user *User, err error) *MockUserRepository_Update_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_Update_Call) RunAndReturn(run func(ctx context.Context, id string, params *NewUser) (*User, error)) *MockUserRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserArtistSubscriptionRepository creates a new instance of MockUserArtistSubscriptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserArtistSubscriptionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserArtistSubscriptionRepository {
	mock := &MockUserArtistSubscriptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserArtistSubscriptionRepository is an autogenerated mock type for the UserArtistSubscriptionRepository type
type MockUserArtistSubscriptionRepository struct {
	mock.Mock
}

type MockUserArtistSubscriptionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserArtistSubscriptionRepository) EXPECT() *MockUserArtistSubscriptionRepository_Expecter {
	return &MockUserArtistSubscriptionRepository_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function for the type MockUserArtistSubscriptionRepository
func (_mock *MockUserArtistSubscriptionRepository) Activate(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserArtistSubscriptionRepository_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type MockUserArtistSubscriptionRepository_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserArtistSubscriptionRepository_Expecter) Activate(ctx interface{}, id interface{}) *MockUserArtistSubscriptionRepository_Activate_Call {
	return &MockUserArtistSubscriptionRepository_Activate_Call{Call: _e.mock.On("Activate", ctx, id)}
}

func (_c *MockUserArtistSubscriptionRepository_Activate_Call) Run(run func(ctx context.Context, id string)) *MockUserArtistSubscriptionRepository_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserArtistSubscriptionRepository_Activate_Call) Return(err error) *MockUserArtistSubscriptionRepository_Activate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserArtistSubscriptionRepository_Activate_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockUserArtistSubscriptionRepository_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockUserArtistSubscriptionRepository
func (_mock *MockUserArtistSubscriptionRepository) Create(ctx context.Context, params *NewUserArtistSubscription) (*UserArtistSubscription, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *UserArtistSubscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *NewUserArtistSubscription) (*UserArtistSubscription, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *NewUserArtistSubscription) *UserArtistSubscription); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserArtistSubscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *NewUserArtistSubscription) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserArtistSubscriptionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserArtistSubscriptionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - params *NewUserArtistSubscription
func (_e *MockUserArtistSubscriptionRepository_Expecter) Create(ctx interface{}, params interface{}) *MockUserArtistSubscriptionRepository_Create_Call {
	return &MockUserArtistSubscriptionRepository_Create_Call{Call: _e.mock.On("Create", ctx, params)}
}

func (_c *MockUserArtistSubscriptionRepository_Create_Call) Run(run func(ctx context.Context, params *NewUserArtistSubscription)) *MockUserArtistSubscriptionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *NewUserArtistSubscription
		if args[1] != nil {
			arg1 = args[1].(*NewUserArtistSubscription)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserArtistSubscriptionRepository_Create_Call) Return(userArtistSubscription *UserArtistSubscription, err error) *MockUserArtistSubscriptionRepository_Create_Call {
	_c.Call.Return(userArtistSubscription, err)
	return _c
}

func (_c *MockUserArtistSubscriptionRepository_Create_Call) RunAndReturn(run func(ctx context.Context, params *NewUserArtistSubscription) (*UserArtistSubscription, error)) *MockUserArtistSubscriptionRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Deactivate provides a mock function for the type MockUserArtistSubscriptionRepository
func (_mock *MockUserArtistSubscriptionRepository) Deactivate(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Deactivate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserArtistSubscriptionRepository_Deactivate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deactivate'
type MockUserArtistSubscriptionRepository_Deactivate_Call struct {
	*mock.Call
}

// Deactivate is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserArtistSubscriptionRepository_Expecter) Deactivate(ctx interface{}, id interface{}) *MockUserArtistSubscriptionRepository_Deactivate_Call {
	return &MockUserArtistSubscriptionRepository_Deactivate_Call{Call: _e.mock.On("Deactivate", ctx, id)}
}

func (_c *MockUserArtistSubscriptionRepository_Deactivate_Call) Run(run func(ctx context.Context, id string)) *MockUserArtistSubscriptionRepository_Deactivate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserArtistSubscriptionRepository_Deactivate_Call) Return(err error) *MockUserArtistSubscriptionRepository_Deactivate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserArtistSubscriptionRepository_Deactivate_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockUserArtistSubscriptionRepository_Deactivate_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockUserArtistSubscriptionRepository
func (_mock *MockUserArtistSubscriptionRepository) Delete(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserArtistSubscriptionRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUserArtistSubscriptionRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserArtistSubscriptionRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockUserArtistSubscriptionRepository_Delete_Call {
	return &MockUserArtistSubscriptionRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockUserArtistSubscriptionRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *MockUserArtistSubscriptionRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserArtistSubscriptionRepository_Delete_Call) Return(err error) *MockUserArtistSubscriptionRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserArtistSubscriptionRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockUserArtistSubscriptionRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockUserArtistSubscriptionRepository
func (_mock *MockUserArtistSubscriptionRepository) Get(ctx context.Context, id string) (*UserArtistSubscription, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *UserArtistSubscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*UserArtistSubscription, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *UserArtistSubscription); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserArtistSubscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserArtistSubscriptionRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUserArtistSubscriptionRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserArtistSubscriptionRepository_Expecter) Get(ctx interface{}, id interface{}) *MockUserArtistSubscriptionRepository_Get_Call {
	return &MockUserArtistSubscriptionRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockUserArtistSubscriptionRepository_Get_Call) Run(run func(ctx context.Context, id string)) *MockUserArtistSubscriptionRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserArtistSubscriptionRepository_Get_Call) Return(userArtistSubscription *UserArtistSubscription, err error) *MockUserArtistSubscriptionRepository_Get_Call {
	_c.Call.Return(userArtistSubscription, err)
	return _c
}

func (_c *MockUserArtistSubscriptionRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id string) (*UserArtistSubscription, error)) *MockUserArtistSubscriptionRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByArtist provides a mock function for the type MockUserArtistSubscriptionRepository
func (_mock *MockUserArtistSubscriptionRepository) GetByArtist(ctx context.Context, artistID string, limit int, offset int) ([]*UserArtistSubscription, error) {
	ret := _mock.Called(ctx, artistID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetByArtist")
	}

	var r0 []*UserArtistSubscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*UserArtistSubscription, error)); ok {
		return returnFunc(ctx, artistID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) []*UserArtistSubscription); ok {
		r0 = returnFunc(ctx, artistID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*UserArtistSubscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = returnFunc(ctx, artistID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserArtistSubscriptionRepository_GetByArtist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByArtist'
type MockUserArtistSubscriptionRepository_GetByArtist_Call struct {
	*mock.Call
}

// GetByArtist is a helper method to define mock.On call
//   - ctx context.Context
//   - artistID string
//   - limit int
//   - offset int
func (_e *MockUserArtistSubscriptionRepository_Expecter) GetByArtist(ctx interface{}, artistID interface{}, limit interface{}, offset interface{}) *MockUserArtistSubscriptionRepository_GetByArtist_Call {
	return &MockUserArtistSubscriptionRepository_GetByArtist_Call{Call: _e.mock.On("GetByArtist", ctx, artistID, limit, offset)}
}

func (_c *MockUserArtistSubscriptionRepository_GetByArtist_Call) Run(run func(ctx context.Context, artistID string, limit int, offset int)) *MockUserArtistSubscriptionRepository_GetByArtist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockUserArtistSubscriptionRepository_GetByArtist_Call) Return(userArtistSubscriptions []*UserArtistSubscription, err error) *MockUserArtistSubscriptionRepository_GetByArtist_Call {
	_c.Call.Return(userArtistSubscriptions, err)
	return _c
}

func (_c *MockUserArtistSubscriptionRepository_GetByArtist_Call) RunAndReturn(run func(ctx context.Context, artistID string, limit int, offset int) ([]*UserArtistSubscription, error)) *MockUserArtistSubscriptionRepository_GetByArtist_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUser provides a mock function for the type MockUserArtistSubscriptionRepository
func (_mock *MockUserArtistSubscriptionRepository) GetByUser(ctx context.Context, userID string, limit int, offset int) ([]*UserArtistSubscription, error) {
	ret := _mock.Called(ctx, userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetByUser")
	}

	var r0 []*UserArtistSubscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*UserArtistSubscription, error)); ok {
		return returnFunc(ctx, userID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) []*UserArtistSubscription); ok {
		r0 = returnFunc(ctx, userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*UserArtistSubscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = returnFunc(ctx, userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserArtistSubscriptionRepository_GetByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUser'
type MockUserArtistSubscriptionRepository_GetByUser_Call struct {
	*mock.Call
}

// GetByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - limit int
//   - offset int
func (_e *MockUserArtistSubscriptionRepository_Expecter) GetByUser(ctx interface{}, userID interface{}, limit interface{}, offset interface{}) *MockUserArtistSubscriptionRepository_GetByUser_Call {
	return &MockUserArtistSubscriptionRepository_GetByUser_Call{Call: _e.mock.On("GetByUser", ctx, userID, limit, offset)}
}

func (_c *MockUserArtistSubscriptionRepository_GetByUser_Call) Run(run func(ctx context.Context, userID string, limit int, offset int)) *MockUserArtistSubscriptionRepository_GetByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockUserArtistSubscriptionRepository_GetByUser_Call) Return(userArtistSubscriptions []*UserArtistSubscription, err error) *MockUserArtistSubscriptionRepository_GetByUser_Call {
	_c.Call.Return(userArtistSubscriptions, err)
	return _c
}

func (_c *MockUserArtistSubscriptionRepository_GetByUser_Call) RunAndReturn(run func(ctx context.Context, userID string, limit int, offset int) ([]*UserArtistSubscription, error)) *MockUserArtistSubscriptionRepository_GetByUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserAndArtist provides a mock function for the type MockUserArtistSubscriptionRepository
func (_mock *MockUserArtistSubscriptionRepository) GetByUserAndArtist(ctx context.Context, userID string, artistID string) (*UserArtistSubscription, error) {
	ret := _mock.Called(ctx, userID, artistID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserAndArtist")
	}

	var r0 *UserArtistSubscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*UserArtistSubscription, error)); ok {
		return returnFunc(ctx, userID, artistID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *UserArtistSubscription); ok {
		r0 = returnFunc(ctx, userID, artistID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserArtistSubscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, userID, artistID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserArtistSubscriptionRepository_GetByUserAndArtist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserAndArtist'
type MockUserArtistSubscriptionRepository_GetByUserAndArtist_Call struct {
	*mock.Call
}

// GetByUserAndArtist is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - artistID string
func (_e *MockUserArtistSubscriptionRepository_Expecter) GetByUserAndArtist(ctx interface{}, userID interface{}, artistID interface{}) *MockUserArtistSubscriptionRepository_GetByUserAndArtist_Call {
	return &MockUserArtistSubscriptionRepository_GetByUserAndArtist_Call{Call: _e.mock.On("GetByUserAndArtist", ctx, userID, artistID)}
}

func (_c *MockUserArtistSubscriptionRepository_GetByUserAndArtist_Call) Run(run func(ctx context.Context, userID string, artistID string)) *MockUserArtistSubscriptionRepository_GetByUserAndArtist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserArtistSubscriptionRepository_GetByUserAndArtist_Call) Return(userArtistSubscription *UserArtistSubscription, err error) *MockUserArtistSubscriptionRepository_GetByUserAndArtist_Call {
	_c.Call.Return(userArtistSubscription, err)
	return _c
}

func (_c *MockUserArtistSubscriptionRepository_GetByUserAndArtist_Call) RunAndReturn(run func(ctx context.Context, userID string, artistID string) (*UserArtistSubscription, error)) *MockUserArtistSubscriptionRepository_GetByUserAndArtist_Call {
	_c.Call.Return(run)
	return _c
}
